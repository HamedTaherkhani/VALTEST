Extracting testcases and running them...

Unsupported comparison operator in assertion: assert findPeakElement([1, 2, 3, 4, 5]) in [2, 4]
Unsupported comparison operator in assertion: assert findPeakElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 8, 7, 6, 5, 4, 3, 2, 1]) in [8, 0]
Unsupported comparison operator in assertion: assert findPeakElement([1, 3, 5, 7, 9, 8, 6, 4, 2, 0]) in [4, 0]
Unsupported comparison operator in assertion: assert findPeakElement([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) in [9, 0]
Unsupported comparison operator in assertion: assert reformat("a0b1c2") in ["0a1b2c", "0c2a1b", "2c0a1b"]
Unsupported comparison operator in assertion: assert reformat("a1b2c3d4") in ["1a2b3c4d", "1c2d3a4b", "3a4b1c2d"]
Unsupported comparison operator in assertion: assert reformat("1a2b3c4d") in ["1c2d3a4b", "3a4b1c2d", "3c4d1a2b"]
Unsupported comparison operator in assertion: assert reformat("abcde12345") in ["1a2b3c4d5e", "1c2d3e4a5b", "3a4b5c1d2e"]
Unsupported comparison operator in assertion: assert reformat("a1b2c3d4e5") in ["1a2b3c4d5e", "1c2d3e4a5b", "3a4b5c1d2e"]
Unsupported comparison operator in assertion: assert reformat("12345abcde") in ["1a2b3c4d5e", "1c2d3e4a5b", "3a4b5c1d2e"]
Unsupported comparison operator in assertion: assert reformat("a1b2c3d4e") in ["1a2b3c4d5e", "1c2d3e4a5b", "3a4b5c1d2e"]
Unsupported comparison operator in assertion: assert reformat("1a2b3c4d5e") in ["1c2d3e4a5b", "3a4b5c1d2e", "3c4d5e1a2b"]
Unsupported comparison operator in assertion: assert reformat("abcde1234") in ["1a2b3c4d5e", "1c2d3e4a5b", "3a4b5c1d2e"]
Unsupported comparison operator in assertion: assert reformat("1a2b3c4d") in ["1c2d3a4b", "3a4b1c2d", "3c4d1a2b"]
Unsupported comparison operator in assertion: assert reformat("abcde123") in ["1a2b3c4d5e", "1c2d3e4a5b", "3a4b5c1d2e"]
Unsupported comparison operator in assertion: assert reformat("1a2b3c") in ["1c2a3b", "3a1b2c", "3c1a2b"]
Unsupported comparison operator in assertion: assert reformat("abcde12") in ["1a2b3c4d5e", "1c2d3e4a5b", "3a4b5c1d2e"]
Unsupported comparison operator in assertion: assert reformat("1a2b3") in ["1c2a3b", "3a1b2c", "3c1a2b"]
Unsupported comparison operator in assertion: assert reformat("abcde1") in ["1a2b3c4d5e", "1c2d3e4a5b", "3a4b5c1d2e"]
Unsupported comparison operator in assertion: assert reformat("1a2b") in ["1c2a", "2a1b", "2c1a"]
Unsupported comparison operator in assertion: assert reformat("abcd1") in ["1a2b3c4d", "1c2d3a4b", "3a4b1c2d"]
Unsupported comparison operator in assertion: assert reformat("1a2") in ["1c2a", "2a1c"]
Unsupported comparison operator in assertion: assert reformat("abc1") in ["1a2b3c", "1c2a3b", "3a1b2c"]
Unsupported assertion format: assert min_trips
Saving processed functions to unfiltered_testcases/LeetCode_gpt-3.5-turbo_processed.pkl...
527
527
{'input_mean': 99.992, 'input_max': 100.0, 'input_min': 99.98, 'input_sum': 499.96000000000004, 'input_total': 5, 'input_variance': 5.5999999999989096e-05, 'output_mean': 100.0, 'output_max': 100.0, 'output_min': 100.0, 'output_sum': 200.0, 'output_total': 2, 'output_variance': 0.0, 'second_output_mean': 0.0, 'second_output_max': 0.0, 'second_output_min': 0.0, 'second_output_sum': 0.0, 'second_output_total': 2, 'second_output_variance': 0.0, 'second_input_mean': 0.004, 'second_input_max': 0.02, 'second_input_min': 0.0, 'second_input_sum': 0.02, 'second_input_total': 5, 'second_input_variance': 6.400000000000001e-05, 'is_valid': 1, 'function_id': 0}
Sample feature: {'input_mean': 99.992, 'input_max': 100.0, 'input_min': 99.98, 'input_sum': 499.96000000000004, 'input_total': 5, 'input_variance': 5.5999999999989096e-05, 'output_mean': 100.0, 'output_max': 100.0, 'output_min': 100.0, 'output_sum': 200.0, 'output_total': 2, 'output_variance': 0.0, 'second_output_mean': 0.0, 'second_output_max': 0.0, 'second_output_min': 0.0, 'second_output_sum': 0.0, 'second_output_total': 2, 'second_output_variance': 0.0, 'second_input_mean': 0.004, 'second_input_max': 0.02, 'second_input_min': 0.0, 'second_input_sum': 0.02, 'second_input_total': 5, 'second_input_variance': 6.400000000000001e-05, 'is_valid': 1, 'function_id': 0}
83.16516889970615    94.29698526776636    8.04479490249924    3.001879917101957
79.91187566030848   75.83662472113562    9.514242268380656    11.347839967736208
Balanced dataset size - Number of valid testcases: 5150
Balanced dataset size - Number of invalid testcases: 3080
Valid Testcase Ratio" 0.63
calculating initial coverage of the functions and mutation score....
The total number of tests for mutation testing: 5150
running mutation testing...
Final Mutation Testing Results:
Total mutants: 5651
Killed mutants: 4871
Survived mutants: 656
Timeout mutants: 100
Suspicious mutants: 24
Overall Mutation Score: 86.20%
Initial coverage:
0.981

Training and evaluating model: ensemble
[LightGBM] [Info] Number of positive: 4098, number of negative: 2486
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.205485 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 5161
[LightGBM] [Info] Number of data points in the train set: 6584, number of used features: 24
[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.622418 -> initscore=0.499824
[LightGBM] [Info] Start training from score 0.499824
[LightGBM] [Info] Number of positive: 4112, number of negative: 2472
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.237926 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 5157
[LightGBM] [Info] Number of data points in the train set: 6584, number of used features: 24
[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.624544 -> initscore=0.508882
[LightGBM] [Info] Start training from score 0.508882
[LightGBM] [Info] Number of positive: 4146, number of negative: 2438
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.212900 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 5167
[LightGBM] [Info] Number of data points in the train set: 6584, number of used features: 24
[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.629708 -> initscore=0.530966
[LightGBM] [Info] Start training from score 0.530966
[LightGBM] [Info] Number of positive: 4195, number of negative: 2389
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.244927 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 5149
[LightGBM] [Info] Number of data points in the train set: 6584, number of used features: 24
[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.637151 -> initscore=0.563018
[LightGBM] [Info] Start training from score 0.563018
[LightGBM] [Info] Number of positive: 4049, number of negative: 2535
[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.254914 seconds.
You can set `force_row_wise=true` to remove the overhead.
And if memory is not enough, you can set `force_col_wise=true`.
[LightGBM] [Info] Total Bins 5155
[LightGBM] [Info] Number of data points in the train set: 6584, number of used features: 24
[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.614976 -> initscore=0.468276
[LightGBM] [Info] Start training from score 0.468276
Model: ensemble
Threshold: 0.8
=== Selection Statistics ===
Total selected instances: 3250
The ratio valid test cases: 0.87
============================
Calculating coverage and mutation score using filtered test cases...
The total number of tests for mutation testing: 2828
running mutation testing...Final Mutation Testing Results:
Total mutants: 987
Killed mutants: 848
Survived mutants: 129
Timeout mutants: 4
Suspicious mutants: 6
Overall Mutation Score: 85.92%
{'ensemble': {'coverage': 0.978, 'total_selected': 3250, 'valid_test_case_ration': 0.87}}
Saving filtered functions to filtered_testcases/LeetCode_gpt-3.5-turbo.pkl...
